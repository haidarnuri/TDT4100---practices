package EksamenKont2015;

public class Unit {
	
	private String symbol = null;
	private Unit base = null;
	private double factor;
	private double offset;
	

	
	
	
	public Unit(String symbol) throws IllegalArgumentException {
		checkValidSymbol(symbol);
        this.symbol=symbol;
    }
	
	 
    public Unit(String symbol, Unit base, double factor, double offset) throws IllegalArgumentException {
        this(symbol,base,factor);
        this.offset=offset;
    }
	
    
    /**
     * Constructor for derived units, e.g. kilometer, milligram and Celcius, derived from meter, gram and Kelwin respectively.
     * A derived unit includes the factor and offset for the linear formula for computing the base unit from the derived one.
     * base-unit-value = derived-unit-value * factor + offset
     * @param symbol The symbol for the derived Unit
     * @param base The base unit, e.g. meter for kilometer, gram for milligram
     * @param factor The factor in the formula, e.g. 1000 for km to m or 0.001 for mg to g. The offset is set to 0.0.
     * @throws IllegalArgumentException if the symbol contains characters that are not alphabetic
     */
    public Unit(String symbol, Unit base, double factor) throws IllegalArgumentException {
        this(symbol);
        this.base=base;
        this.factor=factor;
        
    }
    
    public String getSymbol() {
    	return this.symbol;
    }
    
    public Unit getBase() {
    	return this.base;
    }
    
    
    //Returner null dersom de ikke har samme grunnenhet.
    public Unit findCommonBaseUnit(Unit other) {
    	Unit noCommonUnit = null;
        if(getBase().equals(other)) {
        	return other;
        }else if(other.getBase().equals(this)) {
        	return this;
        	/*
        	 * Her dobbeltsjekker jeg at begge verdiene har en grunnenhet. 
        	 * Hvis jeg ikke hadde hatt getBase()!=null så kunne begge to hatt grunnenheten null, 
        	 * som ikke er bra. 
        	 */
        }else if(getBase().equals(other.getBase()) && getBase()!=null){
        	return getBase();
        }else {
        	return noCommonUnit;
        }
    }
    
    /**
     * Converts value from this unit to the other unit.
     * @param value The value to convert.
     * @param other The other unit, that value is converted to.
     * @return value converted from this unit to the other unit
     * @throws IllegalArgumentException if there is no common base unit.
     */
    public double convert(double value, Unit other) throws IllegalArgumentException {
        Unit base = findCommonBaseUnit(other);
        if (base == null) {
            throw new IllegalArgumentException("Cannot convert from " + this + " to " + other);
        }
        double baseValue = convertToBase(value, base);
        return other.convertFromBase(baseValue, base);
    }
    /**
     * Helper method for converting from this unit to a specific base unit.
     * @param value The value to convert.
     * @param base The base unit to convert to.
     * @return The converted value.
     */
    private double convertToBase(double value, Unit base) {
        if (this == base) {
            return value;
        }
        if (this.base == null) {
            throw new IllegalArgumentException(base + " is not a base for " + this);
        }
        return this.base.convertToBase(value * factor + offset, base);
    }
    /**
     * Helper method for converting from a specific base unit to this unit.
     * @param value The value to convert.
     * @param base The base unit to convert from.
     * @return The converted value.
     */
    private double convertFromBase(double value, Unit base) {
        if (this == base) {
            return value;
        }
        String s = String.valueOf(2);
        if (this.base == null) {
            throw new IllegalArgumentException(base + " is not a base for " + this);
        }
        return this.base.convertFromBase(value, base) / factor - offset / factor;
    }
    
 // The currently supported predefined units, that are considered by the valueOf method
    private static Unit
        m = new Unit("m"),
        km = new Unit("km", m, 1000.0),
        dm = new Unit("dm", m, 0.1),
        cm = new Unit("cm", dm, 0.1),
        ALL_UNITS[] = {m, km, dm, cm};
    /**
     * Finds the Unit for the given symbol among all predefined units.
     * Currently supported units are m, km, dm, cm
     * @param symbol the symbol to search for, e.g. "m" or "dm"
     * @return the Unit with the given symbol, or null, of no such Unit was found
     */
    public static Unit valueOf(String symbol) {
        for (Unit unit : ALL_UNITS) {
            if (symbol.equals(unit.symbol)) {
                return unit;
            }
        }
        return null;
    }
    
    
    @Override
    public String toString() {
        return symbol;
    }
	
    
    private void checkValidSymbol(String symbol) {
    	if(symbol.contains("[a-zA-Z]+")) {
    		throw new IllegalArgumentException("Symbol can only contains letters");
    	}
    }
	
	
	
	
	
}
