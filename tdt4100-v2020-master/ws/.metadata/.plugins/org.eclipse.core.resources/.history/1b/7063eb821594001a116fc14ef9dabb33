package bike;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collection;

import org.junit.runners.AllTests;

public class BikeRental {

	// TODO: del 1, stations and bikes
	
	private Collection<GeoLocation> allStations = new ArrayList<>();
	private Collection<Bike> allBikes = new ArrayList<>();
	
	public BikeRental(Collection<GeoLocation> allStations, Collection<Bike> allBikes) {
		this.allBikes=allBikes;
		this.allStations=allStations;
	}
	
	/**
	 * Counts the number of available bikes within a certain distance of a provided location.
	 * @param location
	 * @param distance
	 * @return the number of available bikes within a certain distance of a provided location
	 */
	private int countAvailableBikesNearby(final GeoLocation location, final double distance) {
		int counter=0;
		for(Bike bike : allBikes) {
			if(bike.getLocation().distance(location)<distance) {
				counter++;
			}
		}
		return counter;
	}

	/**
	 * Finds the closest station (location) within the provided (maximum) distance of the provided bike
	 * @param bike
	 * @param minDistance
	 * @return the closest station (location) within the provided (maximum) distance of the provided bike
	 */
	private GeoLocation getStationNearby(final Bike bike, final double maxDistance) {
		double minDistance = 0;
		GeoLocation tempLocation = null;
		//finner en stasjon som er innenfor radiusen.
		for(GeoLocation location:allStations) {
			if(location.distance(bike.getLocation())<maxDistance) {
				minDistance= location.distance(bike.getLocation());
				tempLocation=location;
				break;
			}
		}
		//Finner den stasjonen som er nÃ¦rmest til sykelen. 
		for(GeoLocation location:allStations) {
			if(location.distance(bike.getLocation())<minDistance) {
				tempLocation=location;
			}
		}
		return tempLocation;
	}

	/**
	 * @return the bikes that currently are rented
	 */
	private Collection<Bike> getRentedBikes() {
		Collection<Bike> currentlyRented = new ArrayList<>();
		for(Bike bike:allBikes) {
			if(bike.getRenter()!=null) {
				currentlyRented.add(bike);
			}
		}
		return currentlyRented;
	}

	/**
	 * @return the bikes that are close to a station (within 30 meters), but still are rented
	 */
	private Collection<Bike> getUnreturnedBikes() {
		Collection<Bike> rentedBikesWithin30 = new ArrayList<>();
		for(Bike bike:getRentedBikes()) {
			if(getStationNearby(bike,30)!=null && bike.getRenter()!=null) {
				rentedBikesWithin30.add(bike);
			}
		}
		return rentedBikesWithin30;		
	}

	/**
	 * Called when a person starts renting a bike by taking it from a station.
	 * Checks the arguments before registering all necessary info of the rental.
	 * @param person
	 * @param now the start time of the rental
	 * @param returnTime the expected return time
	 * @throws (some subclass of) RuntimeException if the now isn't before returnTime
	 * @throws (some subclass of) RuntimeException if the bike isn't available for rental
	 */
	public void rentBike(final Person person, final Bike bike, final LocalDateTime now, final LocalDateTime returnTime) {
		if(getRentedBikes().contains(bike)) {
			throw new IllegalArgumentException("Bike is currently unavalible");
		}
		if(now.isAfter(returnTime)) {
			throw new IllegalArgumentException("Return time is before currently time");
		}
		bike.rentABike(person, now, returnTime);
	}

	/**
	 * Called when a person extends an ongoing bike rental.
	 * Checks the arguments before registering all necessary info of the rental extension.
	 * @param person
	 * @param bike
	 * @param now the time the extension starts
	 * @param returnTime the (new) expected return time
	 * @throws (some subclass of) RuntimeException if the now isn't before returnTime
	 * @throws (some subclass of) RuntimeException if the bike isn't currently being rented
	 * @throws (some subclass of) RuntimeException if person isn't currently renting the bike
	 */
	public void extendRental(final Person person, final Bike bike, final LocalDateTime now, final LocalDateTime returnTime) {
		// TODO: del 1
	}

	/**
	 * Called when a person returns a bike.
	 * Checks the arguments, computes the price, performs the payment and clears the rental info.
	 * Note that if the payment isn't completed, the rental info should not be cleared.
	 * @param person
	 * @param bike
	 * @param now the time the bike is returned
	 * @throws (some subclass of) RuntimeException if the bike isn't currently being rented by the person argument
	 * @throws (some subclass of) RuntimeException if person isn't near (within 30 meters of) a station
	 */
	public void returnBike(final Person person, final Bike bike, final LocalDateTime now) {
		// TODO: del 1
	}

	public static void main(final String[] args) {
		// Some geo-locations to use in testing:
		// In the hall outside F1: 63.416522, 10.403345
		// By the entrance to Realfagsbygget closest to F1: 63.416017, 10.404729
		// Another spot by the same entrance, closer than 30 meters: 63.416079, 10.404565
		System.out.println(GeoLocation.distance(63.416017, 10.404729, 63.416079, 10.404565));
	}
}
