package stuff;

import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;

public class StringBooleanMetaIterator implements Iterator<String> {

	private final Iterator<String> strings;
	private final Iterator<Boolean> booleans;
	private Boolean currentHasNext;

	public StringBooleanMetaIterator(final Iterator<String> strings, final Iterator<Boolean> booleans) {
		this.booleans=booleans;
		this.strings=strings;
		if(booleans.hasNext()) {
			currentHasNext = booleans.next();
		}
		
	}

	@Override
	public boolean hasNext() {
		if(strings.hasNext()) {
			if(currentHasNext) {
				return true;
			} else if(booleans.hasNext()) {
				strings.next();
				currentHasNext = booleans.next();
				return hasNext();
			} else  {
				return false;
			}
		}else {
			System.out.println("hasAnyTrueLeft: false");
			return false;
		}
		
	}
	
	private boolean hasAnyTrueLeft (Iterator<Boolean> booleans) {
		Iterator<Boolean> temp = booleans;
		Boolean check = temp.next();
		System.out.println("check:" + check);
		if(!check){
			if(temp.hasNext()) {
				return hasAnyTrueLeft(temp);
			} else {
				return false;
			}
		}else {
			return true;
		}
	}

	@Override
	public String next() {
		return strings.next();
	}
	
	
	
	
	
	public static void main(final String[] args) {
		final Collection<String> strings = Arrays.asList("meta-iteratorer", "er", "ikke", "kult");
		final Collection<Boolean> booleans = Arrays.asList(true, true, false, true);

		// skal skrive ut
		// meta-iteratorer er kult
		final StringBooleanMetaIterator metaIterator = new StringBooleanMetaIterator(strings.iterator(), booleans.iterator());
		while (metaIterator.hasNext()) {
			System.out.print(metaIterator.next());
			System.out.print(" ");
		}
	}

	
}
