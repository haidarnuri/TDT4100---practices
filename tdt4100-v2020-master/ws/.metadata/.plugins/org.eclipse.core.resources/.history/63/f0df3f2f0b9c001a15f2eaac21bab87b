package EksamenKont2018;

import java.util.Arrays;
import java.util.Collection;

/**
* Implementation of DiceScorer that gives a specific score
* when no other DiceScore object applies.
* Requires that a certain number of dice have been thrown.
*/
public class Nothing extends AbstractScorer implements DiceScorer {
  
  
    /**
    * Initializes this Nothing object with the minimum required number of dice,
     * the specific score given and the other DiceScorer objects.
    * @param numDice the min. number of dice required for this rule to apply
    * @param score the specific score to give
    * @param diceScorers the (other) rules to check
    */
    private int numDice;
    private int score;
    private Collection<DiceScorer> diceScorers;
 
    
    public Nothing(int numDice, int score,DiceScorer ...diceScorersInput) {
        super(score):
    	this.numDice=numDice;
        this.diceScorers=Arrays.asList(diceScorersInput);
   }
  
    /**
    * Checks that no (other) DiceScore object apply,
    * in case a specific score is given.
    */
    @Override
    public DiceScore getScore(Dice dice) {
    	DiceScore score = null;
    	for(DiceScorer diceScorer : diceScorers) {
    		if(diceScorer.getScore(dice)!=null && !(diceScorer instanceof Nothing)) {
    			score = (DiceScore)diceScorer;
    			break;
    		}
    	}
    	if(score==null) {
    		score=new DiceScore(dice, this.score);
    	}
    	return score;
    }

	@Override
	public Collection<Integer> internalScoreCounter() {
		// TODO Auto-generated method stub
		return null;
	}
}
