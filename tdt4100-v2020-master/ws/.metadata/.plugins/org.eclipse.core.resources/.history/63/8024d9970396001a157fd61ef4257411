package EksamenKont2015;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;

public class ValuesSeries implements Values {

	 private Collection<Value> valueSeries = new ArrayList<>();
	 private final Unit unit;	 
	 
	/**
     * Constructs a new ValueSeries object, with the provided Unit.
     * @param unit
     */
    public ValuesSeries(Unit unit) {
        this.unit=unit;
    }
  
    /**
     * Appends the provided double to this ValueSeries. The double value is assumed to be in the Unit of this ValueSeries.
     * @param value the double to append
     */
    public void appendValue(double value) {
    	if(!valueSeries.contains(new Value(this.unit, value))) {
    		valueSeries.add(new Value(this.unit,value));
    	}
    }
    /**
     * Appends the provided Value to this ValueSeries, by first converting it to this ValueSeries' unit and then appending it.
     * @param value the Value to append, after converting it to this ValueSeries' Unit.
     */
    public void appendValue(Value value) {
    	appendValue(checkUnitAndReturnRightValue(value));
    }
    
    
    private double checkUnitAndReturnRightValue(Value value) {
    	if(value.getUnit()==this.unit) {
    		return value.getValue();
    	}else {
    		double convertedValue =  value.getUnit().convert(value.getValue(), this.unit);
    		return convertedValue;
    	}
    }
   
	@Override
	public Iterator<Double> iterator() {
		return null;
	}

	@Override
	public Unit getUnit() {
		return this.unit;
	}

	@Override
	public int size() {
		return valueSeries.size();
	}

	@Override
	public double average() {	
		double sum=0;
		for(Value value:this.valueSeries) {
			sum+=value.getValue();
		}
		return sum;
	}
	
	private double calculateSum(Collection<Value> otherSeries) {
		double sum= 0;
		for(Value value:this.valueSeries) {
			//Hvis en liste er lengre enn den andre så legger jeg til verdier kun fra den ene lista. 
			//Dersom begge har igjen verdier så summerer jeg disse. 
			for(Value otherValue: otherSeries) {
				if(value==null) {
					sum+=otherValue.getValue();
				}else if(otherValue==null){
					sum+=value.getValue();
				}else if(value!=null && otherValue!=null){
					sum+=value.getValue()+otherValue.getValue();
				}
			}
			return sum;
	}

	@Override
	public Values add(Values other) {
		for
		return null;
	}

	
	
	
	@Override
	public void addValueListener(ValuesListener listener) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void removeValueListener(ValuesListener listener) {
		// TODO Auto-generated method stub
		
	}
    
}
