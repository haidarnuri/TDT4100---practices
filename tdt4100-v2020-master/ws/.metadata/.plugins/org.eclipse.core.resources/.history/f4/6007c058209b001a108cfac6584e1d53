package Eksamen2019;

import java.util.Comparator;
import java.util.function.Predicate;

public class EmergencyPriorityTreatmentUnit extends AbstractTreatmentUnit{

	@Override
	public boolean startTreatment(Doctor doctor) {
		if(noAvailableDoctors()) {
	 		   return false;
	 	  }	 	 
	 	Patient highestPriority = getPatientWithHighestPri();
	 	
	 	//filterer ut leger som ikke har kompetanse til å kurere pasienten. 
	 	//Antar at en ratio på over 0 er en start for å hjelpe pasienten
	 	Doctor availableDoctor = getDoctorWhoCanHelp(highestPriority);
	 	
		if(availableDoctor==null) {
			return false;
		}else {
			availableDoctor.setPatient(highestPriority);
			availableDoctor.treat();
			return true; 
		}
	}
	

	@Override
	public boolean startTreatment(Patient patient) {
		// TODO Auto-generated method stub
		return false;
	}
	
	private Patient getPatientWithHighestPri() {
		return getWaitingPatients().stream()
								   .max(Comparator.comparing(patient->patient.getPriority()))
								   .get();
	}
	
	private Doctor getDoctorWhoCanHelp(Patient highestPriority) {
		return getAvailableDoctors().stream()
				 .filter(doc->doc.canTreat(highestPriority)>0)
				 .findFirst().orElse(null);
	}

	
	 public Doctor getDoctor(final Predicate<Doctor> pred) {  // 1b
         Doctor tempDoctor = getAllDoctors().stream()
       		  						.filter(pred)
       		  						.findAny().orElse(null);
         return tempDoctor;
  }
}
