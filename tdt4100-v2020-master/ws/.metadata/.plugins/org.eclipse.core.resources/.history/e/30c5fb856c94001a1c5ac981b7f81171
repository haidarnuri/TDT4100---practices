package EksamenKont2015;
import java.util.function.BinaryOperator;
public class Value implements Comparable<Value>{

	
	private final Unit unit;
	private final double value;
	
	public Value(Unit unit,double value) {
		this.unit=unit;
		this.value=value;
	}
	
	public Unit getUnit() {
		return this.unit;
	}
	
	public double getValue() {
		return this.value;
	}
	
    public static Value valueOf(String s) {
		char[] chars = s.toCharArray();
        String valueString = "";
        String unitString = "";
        for(char temp: chars) {
        	if(Character.isDigit(temp) || temp == '.') {
        		valueString+=temp;
        	}else {
        		unitString+=temp;
        	}
        }
        return new Value(new Unit(unitString.trim()), Double.valueOf(valueString));
    }
	
  
    //Validerer i første omgang om de har felles enhet. Ikke mening å legge sammen kr og meter.
    public Value add(Value other) {
    	Unit commonUnit = getUnit().findCommonBaseUnit(other.getUnit());
    	System.out.println(getUnit().findCommonBaseUnit(other.getUnit())==null);
    	checkIfValidCommonUnit(commonUnit);
    	double sum = other.getValue() + getUnit().convert(getValue(), other.getUnit());
    	return new Value(commonUnit,getUnit().convert(sum, commonUnit));  	
    }
	
    /**
     * Computes a new value that is the combination of this Value's double value and the provided double.
     * The double values are combined using the provided BinaryOperator.
     * The Unit of the returned Value is the this Value's Unit.
     * @param other the double value to combine with this
     * @return a new Value object representing the sum of this and other
     */
    public Value compute(BinaryOperator<Double> op, double other) {
        return new Value(getUnit(),op.apply(getValue(), other));
    }   
    
    /**
     * Computes the product of this Value and other (a double) using the compute method.
     * @param other the other factor
     * @return the product of this Value's double value and other (also a double)
     */
    
    public Value mult(double other) {
       	return compute((v1,  v2) -> v1 * v2, other);
    }
    
	@Override
    public String toString() {
        return getValue() + unit.toString();
    }
	
	
	@Override
	public int compareTo(Value o) {	
		Value opositeSign = new Value(o.getUnit(),getValue()*-1);
		if(add(opositeSign).getValue()<0) {
			return -1;
		}else if(add(opositeSign).getValue()==0) {
			return 0;
		}else {
			return -1;
		}
	}
	
	private void checkIfValidCommonUnit(Unit commonUnit) {
		if(commonUnit==null) {
			throw new IllegalArgumentException("No common unit");
		}
	}
	
	public static void main(String[] args) {
		Unit commonUnit=new Unit("m","m");
		Value verdi = new Value(commonUnit,2.0);
		Value verdi2 = new Value(commonUnit,1.5);
		System.out.println(verdi.compareTo(verdi2));
		
	}
	
	
}
