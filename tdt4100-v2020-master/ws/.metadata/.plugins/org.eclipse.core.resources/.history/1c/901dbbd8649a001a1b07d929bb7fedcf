package Eksamen2019;

import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;

/**
 * A doctor has the capacity to treat one patient at a time.
 */
public class Doctor {
       // Internal variables go here:
     	private Patient patient;
 
     	private final Collection<String> allComp;
     	
     	public Doctor(String ...competencies) {
     		this.allComp=Arrays.asList(competencies);
     	}
     	
     	public double canTreat(final Patient patient) {
			if()
     		
     		Iterator<String> patientIterator = patient.iterator();
			double canBeTreated=0;
			double numberOfConditions = 0;
			while(patientIterator.hasNext()) {
				if(this.allComp.contains(patientIterator.next())){
					canBeTreated+=1;
				}
				numberOfConditions+=1;
			}
			
     		
     		
     		
     		return 0;
     		
     	}
     	
     	
     	
       /**     
 * @return the patient this doctor is treating, or null if s/he isn't currently treating any patient.
        */
       public Patient getPatient() { // 1a
           return this.patient;
       }
 
 
       /**
        * @return true if this doctor is currently treating a patient, otherwise false.
        */
       public boolean isAvailable() { // 1a
             return getPatient()==null;
       }
 
 
       /**
        * Sets the patient that this doctor is treating, use null to indicate s/he isn't currently treating any patient.
        * @param patient
        */
       public void setPatient(final Patient patient) { // 1a
    	   this.patient=patient;
       }
       
       //Alle private metoder under her
       private void checkIfPatientRequiresTreatment(Patient patient) {
    	   if(!patient.requiresTreatment()) {
    		   throw new IllegalArgumentException("Denne pasienten trenger ikke behandling");
    	   }
       }
       
       
       
       public static void main(String[] args) {
    	   Patient patient1 = new Patient();
    	   Doctor doc1 = new Doctor();
    	   System.out.println(doc1.isAvailable());
       }
       
       
       
}
  
