package EksamenKont2019;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.stream.Collectors;

import org.junit.runners.AllTests;

public class BikeRental {

	private Collection<Bike> allBikes = new ArrayList<>();
	private Collection<GeoLocation> allStations = new ArrayList<>();
	
	public void addBike(Bike bike) {
		if(!getAllBikes().contains(bike)) {
			getAllBikes().add(bike);
		}
	}
	
	public void removeBike(Bike bike) {
		getAllBikes().remove(bike);
	}
	
	public void addStation(GeoLocation location) {
		if(!getAllStations().contains(location)) {
			getAllStations().add(location);
		}
	}
	
	public void removeStation(GeoLocation location) {
		getAllStations().remove(location);
	}
	
	private Collection<GeoLocation> getAllStations(){
		return this.allStations;
	}
	
	private Collection<Bike> getAllBikes(){
		return this.allBikes;
	}
	
	 /**
     * Counts the number of available bikes within a certain distance of a provided location.
     * @param location
     * @param distance
     * @return the number of available bikes within a certain distance of a provided location
     */
    private int countAvailableBikesNearby(GeoLocation location, double distance) {
        int numberBikes = (int)getAllBikes().stream()
        								.filter(b ->b.getLocation().distance(location)<=distance)
        								.count();
        return numberBikes;
    }
	
    /**
     * Finds the closest station (location) within the provided (maximum) distance of the provided bike
     * @param bike
     * @param minDistance
     * @return the closest station (location) within the provided (maximum) distance of the provided bike
     */
    private GeoLocation getStationNearby(Bike bike, double maxDistance) {
        GeoLocation nearestStation=getAllStations().stream()
        										   .filter(station->station.distance(bike.getLocation())<=maxDistance)
        										   .min(Comparator.comparing(l->l.distance(bike.getLocation())))
        										   .orElse(null);
        	return nearestStation;
      }
    
    /**
     * @return the bikes that currently are rented
     */
    private Collection<Bike> getRentedBikes() {
    	Collection<Bike> rentedBikes = getAllBikes().stream()
    												.filter(bike->bike.getRenter()!=null)
    												.collect(Collectors.toList());
    	return rentedBikes;
    }
    
 
	
	
	
	

}
