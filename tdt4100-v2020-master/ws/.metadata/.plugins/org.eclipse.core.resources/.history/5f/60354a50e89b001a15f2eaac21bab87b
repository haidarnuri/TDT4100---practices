package EksamenKont2019;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;import java.util.stream.Collector;
import java.util.stream.Collectors;

import org.junit.runners.AllTests;

public class BikeRental {

	private Collection<Bike> allBikes = new ArrayList<>();
	private Collection<GeoLocation> allStations = new ArrayList<>();
	
	public void addBike(Bike bike) {
		if(!getAllBikes().contains(bike)) {
			getAllBikes().add(bike);
		}
	}
	
	public void removeBike(Bike bike) {
		getAllBikes().remove(bike);
	}
	
	public void addStation(GeoLocation location) {
		if(!getAllStations().contains(location)) {
			getAllStations().add(location);
		}
	}
	
	public void removeStation(GeoLocation location) {
		getAllStations().remove(location);
	}
	
	private Collection<GeoLocation> getAllStations(){
		return this.allStations;
	}
	
	private Collection<Bike> getAllBikes(){
		return this.allBikes;
	}
	
	 /**
     * Counts the number of available bikes within a certain distance of a provided location.
     * @param location
     * @param distance
     * @return the number of available bikes within a certain distance of a provided location
     */
    private int countAvailableBikesNearby(GeoLocation location, double distance) {
        int numberBikes = (int)getAllBikes().stream()
        								.filter(b ->b.getLocation().distance(location)<=distance)
        								.count();
        return numberBikes;
    }
	
    /**
     * Finds the closest station (location) within the provided (maximum) distance of the provided bike
     * @param bike
     * @param minDistance
     * @return the closest station (location) within the provided (maximum) distance of the provided bike
     */
    private GeoLocation getStationNearby(Bike bike, double maxDistance) {
        GeoLocation nearestStation=getAllStations().stream()
        										   .filter(station->station.distance(bike.getLocation())<=maxDistance)
        										   .min(Comparator.comparing(l->l.distance(bike.getLocation())))
        										   .orElse(null);
        	return nearestStation;
      }
    
    /**
     * @return the bikes that currently are rented
     */
    private Collection<Bike> getRentedBikes() {
    	Collection<Bike> rentedBikes = getAllBikes().stream()
    												.filter(bike->bike.getRenter()!=null)
    												.collect(Collectors.toList());
    	return rentedBikes;
    }
    
    /**
     * @return the bikes that are close to a station (within 30m), but still are rented
     */
    private Collection<Bike> getUnreturnedBikes() {
    	Collection<Bike> unreturned = getAllBikes().stream()
    												.filter(bike->getStationNearby(bike,30)!=null)
    												.filter(t->t.getRenter()!=null)
    												.collect(Collectors.toList());
         return unreturned;
    }
    
    /**
     * Called when a person starts renting a bike by taking it from a station.
     * Checks the arguments before registering all necessary info of the rental.
     * @param person
     * @param now the start time of the rental
     * @param returnTime the expected return time
     * @throws (some subclass of) RuntimeException if the now isn't before returnTime
     * @throws (some subclass of) RuntimeException if the bike isn't available for rental
     */
    private LocalDateTime now;
    private LocalDateTime returnTime;
    private double amount=0;
    //Lagrer det i mappinger. 
    
    public void rentBike(Person person, Bike bike, LocalDateTime now, LocalDateTime returnTime) {
        if(returnTime.isBefore(now)) {
        	throw new IllegalArgumentException("Return time is after current time");
        }
        if(bike.getRenter()!=null) {
        	throw new IllegalArgumentException("Bike is not available");
        }
        this.now=now;
        this.returnTime=returnTime;  
        bike.setRenter(person);
    }
 
    /**
     * Called when a person extends an ongoing bike rental.
     * Checks the arguments before registering all necessary info of the rental extension.
     * @param person
     * @param bike
     * @param now the time the extension starts
     * @param returnTime the (new) expected return time
     * @throws (some subclass of) RuntimeException if the now isn't before returnTime
     * @throws (some subclass of) RuntimeException if the bike isn't currently being rented
     * @throws (some subclass of) RuntimeException if person isn't currently renting the bike
     */
    public void extendRental(Person person, Bike bike, LocalDateTime now, LocalDateTime returnTime) {
        // ??? 2 b)
    }
 
    /**
     * Called when a person returns a bike.
     * Checks the arguments, computes the price, performs the payment and clears the rental info.
     * Note that if the payment isn't completed, the rental info should not be cleared.
     * @param person
     * @param bike
     * @param now the time the bike is returned
     * @throws (some subclass of) RuntimeException if the bike isn't currently being rented by the person argument
     * @throws (some subclass of) RuntimeException if person isn't near (within 30m of) a station
     */
    public void returnBike(Person person, Bike bike, LocalDateTime nowTime) {
        if(!getUnreturnedBikes().contains(bike)) {
        	throw new IllegalArgumentException("This bike is not near a station");
        }
        if(!bike.getRenter().equals(person)) {
        	throw new IllegalArgumentException("This is not the current renter to this bike");
        }
        if(this.returnTime.isAfter(nowTime)) {
        	this.returnTime=now;
        }
        //Legger pga for hver påbegynte time
        int hours = this.returnTime.getHour() - this.now.getHour() + 1;
        this.amount = 10*hours;
        bike.getRenter().withdraw(this.amount);
        printReceipt(person, bike);
        bike.setRenter(null);
        //Restarter tidene også. 
        this.now = null;
        this.returnTime=null;
        
        
    }
    
    void printReceipt(Person person, Bike bike) {
    	 
    	 
    }
    
    
    
    
    
    
 
	
	
	
	

}
