package Eksamen2019;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;

public class PriorityTreatmentUnit extends TreatmentUnit{
	
	
	@Override
    public boolean startTreatment(final Doctor doctor) {
	 	  if(noAvailableDoctors()) {
	 		   return false;
	 	  }	 	 
	 	Patient highestPriority = getPatientWithHighestPri();
	 	
	 	//filterer ut leger som ikke har kompetanse til å kurere pasienten. 
	 	//Antar at en ratio på over 0 er en start for å hjelpe pasienten
	 	Doctor availableDoctor = getDoctorWhoCanHelp(highestPriority);
	 	
		if(availableDoctor==null) {
			return false;
		}else {
			availableDoctor.setPatient(highestPriority);
			availableDoctor.treat();
			return true; 
		}
 	}
	
	
	@Override
	public boolean startTreatment(final Patient patient) {   // 1c
		if(noAvailableDoctors()) {
	 		   return false;
	 	  }	
	 	Patient highestPriority = getPatientWithHighestPri(); 
		if(highestPriority.equals(patient)) {
		 	Doctor availableDoctor = getDoctorWhoCanHelp(patient);
		}else {
			
		}
		
		
		/*
		boolean startTreatment = false;
 	   if(noAvailablePatientsOrDoctors()) {
 		   return startTreatment;
 	   }
 	   for(Doctor doc:getAvailableDoctors()) {
           if(doc.canTreat(patient)>0) {
         	doc.setPatient(patient);
         	doc.treat();
        	  	startTreatment=true;
        	  	break;
           }
        }
  	   return startTreatment;   
  	   */
	}
	
	private Patient getPatientWithHighestPri() {
		return getWaitingPatients().stream()
								   .max(Comparator.comparing(patient->patient.getPriority()))
								   .get();
	}
	
	private Doctor getDoctorWhoCanHelp(Patient highestPriority) {
		return getAvailableDoctors().stream()
				 .filter(doc->doc.canTreat(highestPriority)>0)
				 .findFirst().orElse(null);
	}
	

}
