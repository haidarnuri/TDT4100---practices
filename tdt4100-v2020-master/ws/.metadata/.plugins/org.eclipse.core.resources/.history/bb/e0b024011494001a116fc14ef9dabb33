package bike;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/*
 * @startuml
 * class Bike
 * Bike --> Location: location
 * Bike --> Person: renter
 * @enduml
 */
public class Bike {

	private GeoLocation location;
	private Person renter;
	private LocalDateTime startTime,endTime;
	private List<Date> startTimeAndEndTime = new ArrayList<>();
	private Map<Person, List<LocalDateTime>> map = new HashMap<Person, List<LocalDateTime>>();

	
	public Bike(GeoLocation location) {
		setLocation(location);
	}
	
	//Skriver private for at ikke hvem som helst kan skrive en lokasjon på sykkelen. 
	//bruker protected for da kan kan BikeRental endre lokasjon. 
	//Greit å unngå public for da får alle tilgang til denne metoden. 
	protected void setLocation(GeoLocation location) {
		checkValidLocation(location);
		this.location=location;
	}
	
	//tenker at man ikke kan aktivere en leier uten at man har betalt for det, altså gått via rentABike. Dette for å sikre betaling. 
	private void setRenter(Person renter) {
		this.renter=renter;
	}
	
	public GeoLocation getLocation() {
		return this.location;
	}
	
	public Person getRenter() {
		return this.renter;
	}
	
	// TODO: del 1, assosiasjoner

	// TODO: del 1, registrering av leie
	public void rentABike(Person renter, LocalDateTime now, LocalDateTime returnTime) {
		checkValidRenter(renter);
		setRenter(renter);
		Collections.addAll(this.startTimeAndEndTime, now,returnTime);	
		//Bruker denne mappingen til å koble en person til en startTid og en sluttTid
		map.put(getRenter(), this.startTimeAndEndTime);
					
	}
	
	//Når sykkelen blir levert er man interessert i når den faktisk ble levert og hvor den nye plassen er. 
	public void deliverBikeAndPay(LocalDateTime actualEndTime, GeoLocation newLocation) {
		double price, fee; //kan gi disse en pris senere. 
		if(!checkIfRenterKeptHisTime(actualEndTime)) {
			//antar det finnes en metode som regner ut prisen. her betaler han et gebyr fordi at han lever sykkelen for sent. 
			renter.pay(price+fee);
		}else {
			renter.pay(price);
		}
		//antar at betalingen har gått i orden videre i koden. 
		startTimeAndEndTime.clear();
		setRenter(null);
		setLocation(newLocation);
	}
	
	
	private boolean checkIfRenterKeptHisTime(LocalDateTime actualEndTime) {
		return map.get(getRenter()).get(1).isBefore(actualEndTime);
	}
	
	
	
	
	//skriver to metoder for å validere location og renter under. 
	private void checkValidLocation(GeoLocation location) {
		if(location == null) {
			throw new IllegalArgumentException("this location does not exist");
		}
	}
	
	private void checkValidRenter(Person renter) {
		if(renter == null) {
			throw new IllegalArgumentException("this renter does not exist");
		}
	}
	
	
	
	
	
	
	
	
	
}
